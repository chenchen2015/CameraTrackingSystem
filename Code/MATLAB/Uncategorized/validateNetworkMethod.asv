function validateNetworkMethod()

%% Triangulate and Get Reprojected Data
load('StereoCameraCalibration-2.mat');
load('TestImg-2.mat');

[worldPoints,~] = triangulate(matchedPt1,matchedPt2,stereoParams);

GantryPos = GantryPos * 100; % Gantry Unit: [cm]
worldPoints = worldPoints / 10; % Unit: [cm]

%% 
MaxLoopTimes = 1e3;
TestSampleSize = 3;
nSamples = size(GantryPos,1);

errNrm = zeros(MaxLoopTimes*3,1,'double');
for i = 1:MaxLoopTimes
    randIdx = randperm(nSamples);
    
    testIdx = randIdx(1:TestSampleSize);
    trainIdx = randIdx(TestSampleSize+1:end);
    
    testIn = worldPoints(testIdx,:);
    testOut = GantryPos(testIdx,:);
    trainIn = worldPoints(trainIdx,:);
    trainOut = GantryPos(trainIdx,:);
    
    err = fitNeuralNet(trainIn,trainOut,testIn,testOut);
    
    errNrm((i-1)*3+1:(i)*3) = err;
end

end


function err = fitNeuralNet(input,target,testIn,testOut)
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 12-Aug-2016 10:57:24
%
% This script assumes these variables are defined:
%
%   worldPoints - input data.
%   GantryPos - target data.

x = input';
t = target';

testIn = testIn';
testOut = testOut';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Bayesian Regularization backpropagation.

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 90/100;
net.divideParam.valRatio = 5/100;
net.divideParam.testRatio = 5/100;

net.trainParam.showWindow = false;

% Train the Network
[net,~] = train(net,x,t,'useParallel','yes');

% Test the Network
netOut = net(testIn);

% Calculate Error
err = zeros(size(testIn,2),1,'double');
for i = 1:size(testIn,2)
     err(i) = norm(netOut(i,:) - testOut(i,:));
end

net.

end

