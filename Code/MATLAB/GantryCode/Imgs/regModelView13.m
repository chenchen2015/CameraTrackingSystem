function [Y,Xf,Af] = regModelView13(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 24-Jul-2017 16:35:47.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx3 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [58.3950723392064;16.6526946107784;423.41743442516;332.654054054054];
x1_step1_gain = [0.00109738896908689;0.00176613726220262;0.00123857604294176;0.00170960294146075];
x1_step1_ymin = -1;

% Layer 1
b1 = [2.7851151851430216;1.6522627454215835;-1.1518771835259201;1.2029622834936897;-1.0465506968444551;-0.36297686645947791;0.13245304113936879;0.96115372040789515;-2.633447684239405;-3.2126845692758015];
IW1_1 = [-1.0356594044613647 1.5290393733920051 -0.77377402032331399 -1.1210431001951853;-1.4192959150631279 0.0091836467503943198 2.0412530724287019 1.2561866391456671;1.2626404149107915 -0.10772179601467485 0.89662180336908093 -0.16670013390745098;-1.7234302085270938 -0.41200276990059442 1.5945542297342492 0.88724590694196726;1.6023599941453006 0.10888106661080836 -2.1482199653986029 0.78278847161889598;1.0790760629069409 -0.37767143530977249 -1.1718681761185128 0.87835959638687022;-0.071081952737509557 0.1231357125763915 -0.10547212202374301 1.7721349962391906;0.88470945463599771 -0.1989938665723591 1.6131776923315142 -0.34064944582846918;-1.8259085989684269 -0.41118911848115652 -0.97719481710140399 1.0050314798454363;-0.72688028019956663 1.5450326490939406 1.7813751297865323 -1.0791114526469312];

% Layer 2
b2 = [0.6353693452480198;-0.33217712577444447;0.84411610841709739];
LW2_1 = [-0.40291485334354238 0.093666196193628648 -0.3592402560327162 0.21692790958951985 0.29381798635513545 -0.60414174285470135 -0.017242485107319377 0.1266441237710294 -0.03132527155257786 1.0681608516038636;0.20559092085586286 0.021619593985814589 -0.78831746447705009 0.1561776903256793 -0.80139701476849712 1.0932381984366482 -0.33210031284758024 -0.94915827561525767 -0.54014751211649159 0.4816554290961006;0.17002639070320474 0.38381880120787176 0.045310698439278235 -0.29885591199862765 -0.22984148991426379 0.54539315349717443 -1.3056397602948966 0.13351491985802319 1.0698326760624832 0.20307967752545442];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = [2.85714285714286;2.5;5.71428571428571];
y1_step1_xoffset = [-0.7;-0.4;-0.35];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
