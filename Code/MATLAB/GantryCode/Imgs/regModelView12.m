function [y1] = regModelView12(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Jun-2017 17:33:41.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx4 matrix, input #1
% and returns:
%   y = Qx3 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [14.0568181818182;16.6526946107784;22.5;381.841792409694];
x1_step1.gain = [0.00107132559344718;0.00176613726220262;0.00330637077532573;0.00260913703170965];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.31083651523277905;-0.65291680719779599;0.46945644067444875;1.0446215416526066;-0.039305441678787058;1.8016428500144843;0.4653112465679356;-0.55017259603139257;1.1247829533704707;1.2884433127778332;-0.22636974367870158;0.40688481284940869;0.83948402013756684;-0.46001144663901927;0.45281024364288808;0.63741564686068419;-0.80292005465896343;-0.13302720106685381;-2.8007654825862525;-1.8058829658260367];
IW1_1 = [0.13272941583095246 0.6419848925956243 0.37815974966142568 0.88256603251031585;1.8080319811917318 -0.51263098949566488 -0.44807498216936442 0.24271520640424907;-0.073158228923952476 0.094453865380035487 -0.87401465941975154 -0.50635581818254927;-0.80890793037402375 0.68272842924271793 0.52892271558258619 -0.33583708058545408;-1.1954851375960842 -0.58140408477324013 0.098293080128462051 -0.3093761874956063;0.0078284584781323982 0.89959439676631403 0.13717942255633428 -3.2661074569748636;0.25307859238753561 0.43951683234879757 -0.059542191903582217 -2.7471270851361176;0.74454075732416525 -0.70896559942497595 -0.23597094241135594 -1.2174378104202794;-0.89714957615776592 -1.833200839700631 -0.049873493901226765 -0.054452203830487982;-0.088940541175765789 -2.0467221635529858 -0.19499651658292452 0.34461623579609724;-0.10027134958972665 0.54507227793471236 0.45059565208156888 -1.015513753055322;0.27518970315870189 1.5991057887515809 2.3393238401635492 0.45495709782049565;0.42162587725159217 -0.25628517041157889 0.060852442052924283 -0.52400266989938282;-0.5174028999667426 -0.88529205785722986 -0.92372034524746294 0.11997650337441615;0.14131966301683596 -2.794701575212954 -0.38865016177604961 0.12974829687835068;-0.41081541902087232 -1.0189029509754299 0.79124898044424163 0.56971975027580224;1.6101108300722224 0.30338633500766427 0.62036186988172048 0.21682934146501909;1.1124545637934671 -0.44148983646129264 -1.1272128561049661 -0.7506662282922214;3.4952472575064837 -0.69747174893254626 -0.82710912457654306 -0.247643727617675;1.1537421016230123 -0.62613239383085895 -1.6370564976991828 -0.62360717002568966];

% Layer 2
b2 = [-0.044444664366574314;-0.9059812128649738;0.42898534991269888];
LW2_1 = [0.63205810330923773 0.73418048680108761 -0.61873532905553474 1.0206879838934388 0.13397108263926441 -1.3080532897408998 1.6189433106852995 0.83381948551842144 1.1846344266470805 0.79719407787303387 -0.50982798618689706 -0.7243156298743203 -0.43076640313280695 -0.20507158705964304 -1.2787522136526388 -0.67717199760762958 0.33091969782325642 -1.0665853591778023 -0.045072218084980603 -0.25053086380377926;-0.57581103044903437 0.69845130012090995 -0.42931283734187398 0.877330297405022 -1.1404556181773826 2.1937028261787748 -1.456513836887825 0.89648714014669895 -0.55464659046613829 -1.3512822553123522 0.045913658797573614 1.5770683595392205 -0.79059997881346855 0.58608644494685269 1.9091592223065637 0.57596415922738553 -1.3959539752402284 1.0562740660159202 1.6266565297184099 -2.8625831764726266;-0.73985541863336446 -0.11431391325363478 -0.28644510359832648 0.8111648225706356 -0.64240053139672437 0.30859643234053452 0.22040711930733553 0.078800170318916687 -0.387922881909957 1.0403850882303334 0.66255404431831999 0.21073574165576681 -0.58153070793887862 0.92239293689151491 -0.23185223591017226 0.65925590618415097 0.55155814531915459 0.26823078658817917 -0.0059777135363720327 0.24025028163500103];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1.90476190476191;2.5;5.71428571428571];
y1_step1.xoffset = [-0.7;-0.4;-0.35];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
